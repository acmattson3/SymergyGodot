Repository file structure:
./
    get_files.py
    icon.svg
    icon.svg.import
    plugin.cfg
    plugin.gd
    templates.json
    control_charts/
        chart.gd
        chart.tscn
        plotters/
            area_plotter.gd
            bar_plotter.gd
            function_plotter.gd
            line_plotter.gd
            pie_plotter.gd
            scatter_plotter.gd
    examples/
        area_chart/
            Control.gd
            Control.tscn
        bar_chart/
            Control.gd
            Control.tscn
        line_chart/
            Control.gd
            Control.tscn
        multiplot/
            Control.gd
            Control.tscn
        pie_chart/
            Control.gd
            Control.tscn
        scatter_chart/
            Control.gd
            Control.tscn
        simple_chart/
            Control.gd
            Control.tscn
    utilities/
        assets/
            OpenSans-VariableFont_wdth,wght.ttf
            OpenSans-VariableFont_wdth,wght.ttf.import
        classes/
            plotting/
                bar.gd
                chart_properties.gd
                function.gd
                point.gd
            structures/
                array_operations.gd
                data_frame.gd
                matrix.gd
                matrix_generator.gd
        containers/
            canvas/
                canvas.gd
                plot_box/
                    grid_box.gd
                    plot_box.gd
            data_tooltip/
                data_tooltip.gd
                data_tooltip.tscn
            legend/
                function_label.gd
                function_label.tscn
                function_legend.gd
                function_legend.tscn
                function_type.gd
        icons/
            linechart.svg
            linechart.svg.import
        scripts/
            ec_utilities.gd

Text-based files and contents:


<== Begin ./get_files.py ==>
import os
import mimetypes

# Define output file
OUTPUT_FILE = "aggregated_texts.txt"

# List of directories or files to exclude (add paths relative to the script location)
EXCLUDE_PATTERNS = ["node_modules", "package-lock.json", "package.json", "*.git", "*.mac", "*.import", "*.svg", OUTPUT_FILE]

# Function to check if a file or directory should be excluded
def should_exclude(file_path):
    return any(pattern in file_path for pattern in EXCLUDE_PATTERNS)

# Create/clear the output file
with open(OUTPUT_FILE, "w") as output:
    output.write("")

# Insert repository tree
with open(OUTPUT_FILE, "a") as output:
    output.write("Repository file structure:\n")
    for root, dirs, files in os.walk("."):
        # Exclude directories
        dirs[:] = [d for d in dirs if not should_exclude(os.path.join(root, d))]
        # Write tree structure
        level = root.count(os.sep)
        indent = "    " * level
        output.write(f"{indent}{os.path.basename(root)}/\n")
        for file in files:
            if not should_exclude(file):
                output.write(f"{indent}    {file}\n")

# Insert file contents
with open(OUTPUT_FILE, "a") as output:
    output.write("\nText-based files and contents:\n")
    for root, _, files in os.walk("."):
        for file in files:
            file_path = os.path.join(root, file)
            if should_exclude(file_path):
                continue
            # Check if the file is a text file
            mime_type, _ = mimetypes.guess_type(file_path)
            if mime_type and mime_type.startswith("text"):
                output.write("\n\n")
                output.write(f"<== Begin {file_path} ==>\n")
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        output.write(f.read())
                except Exception as e:
                    output.write(f"Error reading file: {e}")
                output.write(f"\n<== End {file_path} ==>\n")

print("Aggregation complete.")

<== End ./get_files.py ==>
